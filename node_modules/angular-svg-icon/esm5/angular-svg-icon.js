import { __read } from 'tslib';
import { Injectable, Optional, SkipSelf, Component, ElementRef, Input, KeyValueDiffers, Renderer2, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';
import { map, tap, catchError, finalize, share } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

var SvgIconRegistryService = /** @class */ (function () {
    function SvgIconRegistryService(http) {
        this.http = http;
        this.iconsByUrl = new Map();
        this.iconsLoadingByUrl = new Map();
    }
    SvgIconRegistryService.prototype.addSvg = function (name, data) {
        if (!this.iconsByUrl.has(name)) {
            var div = document.createElement('DIV');
            div.innerHTML = data;
            var svg = (div.querySelector('svg'));
            this.iconsByUrl.set(name, svg);
        }
    };
    SvgIconRegistryService.prototype.loadSvg = function (url) {
        var _this = this;
        if (this.iconsByUrl.has(url)) {
            return of(this.iconsByUrl.get(url));
        }
        else if (this.iconsLoadingByUrl.has(url)) {
            return this.iconsLoadingByUrl.get(url);
        }
        else {
            var o = (this.http.get(url, { responseType: 'text' }).pipe(map(function (svg) {
                var div = document.createElement('DIV');
                div.innerHTML = svg;
                return (div.querySelector('svg'));
            }), tap(function (svg) { return _this.iconsByUrl.set(url, svg); }), catchError(function (err) {
                console.error(err);
                return throwError(err);
            }), finalize(function () { return _this.iconsLoadingByUrl.delete(url); }), share()));
            this.iconsLoadingByUrl.set(url, o);
            return o;
        }
    };
    SvgIconRegistryService.prototype.unloadSvg = function (url) {
        if (this.iconsByUrl.has(url)) {
            this.iconsByUrl.delete(url);
        }
    };
    return SvgIconRegistryService;
}());
SvgIconRegistryService.decorators = [
    { type: Injectable },
];
SvgIconRegistryService.ctorParameters = function () { return [
    { type: HttpClient, },
]; };
function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http) {
    return parentRegistry || new SvgIconRegistryService(http);
}
var SVG_ICON_REGISTRY_PROVIDER = {
    provide: SvgIconRegistryService,
    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService], HttpClient],
    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY
};
var SvgIconComponent = /** @class */ (function () {
    function SvgIconComponent(element, differs, renderer, iconReg) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.stretch = false;
    }
    Object.defineProperty(SvgIconComponent.prototype, "svgStyle", {
        set: function (v) {
            this._svgStyle = v;
            if (!this.differ && v) {
                this.differ = this.differs.find(v).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    SvgIconComponent.prototype.ngOnInit = function () {
        this.init();
    };
    SvgIconComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    SvgIconComponent.prototype.ngOnChanges = function (changeRecord) {
        if (changeRecord['src']) {
            if (this.svg) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord['stretch']) {
            this.stylize();
        }
    };
    SvgIconComponent.prototype.ngDoCheck = function () {
        if (this.svg && this.differ) {
            var changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    };
    SvgIconComponent.prototype.init = function () {
        var _this = this;
        this.icnSub = this.iconReg.loadSvg(this.src).subscribe(function (svg) {
            _this.setSvg(svg);
            _this.resetDiffer();
        });
    };
    SvgIconComponent.prototype.destroy = function () {
        this.svg = undefined;
        this.differ = undefined;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    };
    SvgIconComponent.prototype.resetDiffer = function () {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    };
    SvgIconComponent.prototype.setSvg = function (svg) {
        if (svg) {
            this.svg = svg;
            var icon = (svg.cloneNode(true));
            var elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.stylize();
        }
    };
    SvgIconComponent.prototype.stylize = function () {
        if (this.svg) {
            var svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    };
    SvgIconComponent.prototype.applyChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this.setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
    };
    SvgIconComponent.prototype.setStyle = function (nameAndUnit, value) {
        var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
        value = value !== null && unit ? "" + value + unit : value;
        var svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, (value));
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    };
    return SvgIconComponent;
}());
SvgIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'svg-icon',
                styles: [":host { display: inline-block; }"],
                template: '<ng-content></ng-content>'
            },] },
];
SvgIconComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: KeyValueDiffers, },
    { type: Renderer2, },
    { type: SvgIconRegistryService, },
]; };
SvgIconComponent.propDecorators = {
    "src": [{ type: Input },],
    "stretch": [{ type: Input },],
    "svgStyle": [{ type: Input },],
};
var AngularSvgIconModule = /** @class */ (function () {
    function AngularSvgIconModule() {
    }
    return AngularSvgIconModule;
}());
AngularSvgIconModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [SvgIconComponent],
                providers: [SVG_ICON_REGISTRY_PROVIDER],
                exports: [SvgIconComponent]
            },] },
];

export { AngularSvgIconModule, SvgIconRegistryService, SVG_ICON_REGISTRY_PROVIDER_FACTORY, SVG_ICON_REGISTRY_PROVIDER, SvgIconComponent };
//# sourceMappingURL=angular-svg-icon.js.map
